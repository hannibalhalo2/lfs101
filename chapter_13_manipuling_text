*cat visualiza archivos ademas de otroas caracterisiticas

cat file1 file2 	          Concatenate multiple files and display the output; i.e. the entire content of the first file is followed by that of the second file
cat file1 file2 > newfile 	Combine multiple files and save the output into a new file
cat file >> existingfile 	  Append a file to the end of an existing file
cat > file 	                Any subsequent lines typed will go into the file, until CTRL-D is typed
cat >> file 	              Any subsequent lines are appended to the file, until CTRL-D is typed

*tac  visualiza un archivo en reversa 
$ tac file
$ tac file1 file2 > newfile

*echo muestra el contenido de una variable o puede ser usado para redireccion de texto desde teclado 
\n new line 
\t represents horizontal tab 

echo string > newfile 	      The specified string is placed in a new file
echo string >> existingfile 	The specified string is appended to the end of an already existing file
echo $variable 	              The contents of the specified environment variable are displayed

*less se usa para abrir archivos muy grandes (como el log del puto tomcat de prod :v :v )
$ less somefile
$ cat somefile | less

*head read the first few lines of a file
head –n 5 grub.cfg

*tail lee las ultimas lineas de un archivo
tail -n 15 somefile.log
 tail -f somefile.log 
 
 *herramientas para visualizar archivos comprimidos 
zcat compressed-file.txt.gz 	      To view a compressed file
$ zless somefile.gz                 To page through a compressed file
or
$ zmore somefile.gz 	  
$ zgrep -i less somefile.gz 	      To search inside a compressed file
$ zdiff file1.txt.gz file2.txt.gz 	To compare two compressed files

*sed stream editor 

sed -e command <filename>       Specify editing commands at the command line, operate on file and put the output on standard out (e.g., the terminal)
sed -f scriptfile <filename> 	  Specify a scriptfile containing sed commands, operate on file and put output on standard out

sed s/pattern/replace_string/ file    	  Substitute first string occurrence in every line
sed s/pattern/replace_string/g file 	    Substitute all string occurrences in every line
sed 1,3s/pattern/replace_string/g file 	  Substitute all string occurrences in a range of lines
sed -i s/pattern/replace_string/g file 	  Save changes for string substitution in the same file

la opcion -i es muy peligros ya que hace los cambios y sobrescribe se recomienda hacer los cambio y luego uno mismo hacer el reemplazo de archivo
busca y remplaza en archivo uno y guarda en archivo 2
$ sed s/pattern/replace_string/g file1 > file2

Example: To convert 01/02/… to JAN/FEB/…

sed -e 's/01/JAN/' -e 's/02/FEB/' -e 's/03/MAR/' -e 's/04/APR/' -e 's/05/MAY/' \
    -e 's/06/JUN/' -e 's/07/JUL/' -e 's/08/AUG/' -e 's/09/SEP/' -e 's/10/OCT/' \
    -e 's/11/NOV/' -e 's/12/DEC/'
    
*awk se usa para extraer y mostrar datos especificos de un archivo 

  -caracterisiticas
  -utilidad poderosa y interpretada en lenguajes de programacion
  -es usado para manipular archivos de datos 
  -trabaja bn con campos ya se un simple pedazo de datos o una columna
  
  awk ‘command’  file 	       Specify a command directly at the command line
  awk -f scriptfile file 	     Specify a file that contains the script to be executed
  
awk '{ print $0 }' /etc/passwd  	      Print entire file
awk -F: '{ print $1 }' /etc/passwd 	    Print first field (column) of every line, separated by a space
awk -F: '{ print $1 $7 }' /etc/passwd 	Print first and seventh field of every line

*sort organiza lineas de texto de forma ascendenteo descendente
sort <filename> 	            Sort the lines in the specified file, according to the characters at the beginning of each line
cat file1 file2 | sort 	      Combine the two files, then sort the lines and display the output on the terminal
sort -r <filename> 	          Sort the lines in reverse order
sort -k 3 <filename> 	        Sort the lines by the 3rd field on each line instead of the beginning

*uniq remueve duplicados
To remove duplicate entries from multiple files at once, use the following command:
sort file1 file2 | uniq > file3
OR
sort -u file1 file2 > file3
To count the number of duplicate entries, use the following command:
uniq -c filename

*PASTE
une 2 archivos en uno en los ejemplos se ve funcionando con columnas 

paste file1 file2

$ paste -d, file1 file2

Common delimiters are 'space', 'tab', '|', 'comma', etc.

*JOIN
version mejorada de paste une 2 archivos sin repetir datos 
join file1 file2

*SPLIT 
separa un archivo en pequenios del numero de lienas que yo quiera sirve para abrir archivos muy grandes

-separar diceiconario
  
  -cuenta palabras
  wc -l americam-english
  99171 american-english
  
  -lo separa en archivos de igual tamanio
  split american-english dictionary
  
 *regular expresion
       Search Patterns                     Usage
          .(dot) 	                         Match any single character
            a|z 	                          Match a or z
             $ 	                           Match end of string
             ^                            	Match beginning of string
             * 	                           Match preceding item 0 or more times
             a..                          	matches azy
           b.|j. 	                         matches both br and ju
            ..$ 	                          matches og
            l.*                           	matches lazy dog
            l.*y 	                         matches lazy
            the.* 	                        matches the whole sentence
            
 *GREP 
 
 Command 	                      Usage
grep [pattern] <filename> 	     Search for a pattern in a file and print all matching lines
grep -v [pattern] <filename> 	  Print all lines that do not match the pattern
grep [0-9] <filename> 	         Print the lines that contain the numbers 0 through 9
grep -C 3 [pattern] <filename> 	Print context of lines (specified number of lines above and below the pattern) for matching the pattern. Here, the number of lines is specified as 3
 

*STRINGS
extre cualquiewr caracter string en cualquier archivo 

strings book1.xls |grep my_string

*tr
convierte caracteres ne otro y diversas tareas relacionadas on texto
tr [options] set1 [set2]
Command 	                                                   Usage
$ tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 	Convert lower case to upper case
$ tr '{}' '()' < inputfile > outputfile 	                   Translate braces into parenthesis
$ echo "This is for testing" | tr [:space:] '\t' 	          Translate white-space to tabs
$ echo "This   is   for    testing" | tr -s [:space:]       Squeeze repetition of characters using -s
$ echo "the geek stuff" | tr -d 't' 	                       Delete specified characters using -d option
$ echo "my username is 432234" | tr -cd [:digit:] 	         Complement the sets using -c option
$ tr -cd [:print:] < file.txt 	                             Remove all non-printable character from a file
$ tr -s '\n' ' ' < file.txt 	                               Join all the lines in a file into a single line

*tee
toma la salida de un comando y la mete a un archivo hace lo mismo que > 
ls -l | tee file

*wc 
cuenta palabras by default usa todas las opciones
Option 	Description
–l 	    Displays the number of lines
-c 	    Displays the number of bytes
-w 	    Displays the number of words

*cut
se usa para manipular archivos de columnas y extrer determinadas columnas por default el separador que busca es tab
ls -l | cut -d" " -f3 

*sumary

            -The command line often allows the users to perform tasks more efficiently than the GUI.
            -cat, short for concatenate, is used to read, print, and combine files.
            -echo displays a line of text either on standard output or to place in a file.
            -sed is a popular stream editor often used to filter and perform substitutions on files and text data streams.
            -awk is an interpreted programming language, typically used as a data extraction and reporting tool.
            -sort is used to sort text files and output streams in either ascending or descending order
            -uniq eliminates duplicate entries in a text file.
            -paste combines fields from different files. It can also extract and combine lines from multiple sources.
            -join combines lines from two files based on a common field. It works only if files share a common field.
            -split breaks up a large file into equal-sized segments.
            -Regular expressions are text strings used for pattern matching. The pattern can be used to search for a specific location, such as the start or end of a line or a word.
            -grep searches text files and data streams for patterns and can be used with regular expressions.
            -tr translates characters, copies standard input to standard output, and handles special characters.
            -tee saves a copy of standard output to a file while still displaying at the terminal.
            -wc (word count) displays the number of lines, words, and characters in a file or group of files.
            -cut extracts columns from a file.
            -less views files a page at a time and allows scrolling in both directions.
            -head displays the first few lines of a file or data stream on standard output. By default, it displays 10 lines.
            -tail displays the last few lines of a file or data stream on standard output. By default, it displays 10 lines.
            -strings extracts printable character strings from binary files.
            -The z command family is used to read and work with compressed files.









